package program2;

import java.util.Random;
import java.util.Scanner;

import program1.test;

public class program {
	public static void main(String[] args) {

		Scanner in = new Scanner(System.in);
		int option = 0;
		int[] optArray = {23, 5, 19, 2, 4, 2, 9, 2, 5, 11}; // array used to optimize VM
		Random ranGen = new Random();
		double start, end, nanoDuration, milliDuration;

		// optimizing each algo 
		System.out.println("Optimizing Virtual Machine...");
		for (int i = 0; i < 5; i++) {
			Alg.insertionSort(optArray);
			Alg.quickSort(optArray);
		}
		System.out.println("Finished Optimizing Virtual Machine...");

		while(true) {
			// Menu
			System.out.printf("Menu\n"
					+ "------------------------------\n"
					+ "Select an option:\n"
					+ "1. Sort an ORDERED array of 1 to 100,000 inclusive.\n"
					+ "2. Sort a RANDOM array of 1 to 100,000 inclusive.\n"
					+ "3. Sort a REVERSE ORDERED array of 1 to 100,000 inclusive.\n"
					+ "4. Quit the program\n");

			// gets the option
			option = in.nextInt();

			if (option < 4) {

				if (option == 1) {
					// create sorted
					int[] original = new int[100000];
					for(int i = 0; i < original.length; i ++) {
						original[i] = i + 1;
					}
					
					//create dups
					int[] dupIS = original.clone();
					int[] dupQS = original.clone();

					
					//Run IS and display results
					start = System.nanoTime();
					Alg.insertionSort(dupIS);
					end = System.nanoTime();
					nanoDuration = end - start;
					milliDuration = nanoDuration / 1000000;

					if (Alg.isOrdered(dupIS)) {
						System.out.println("Array was sorted by Insertion sort.");
						System.out.printf("Insertion Sort Algo took %f in nanoseconds or %f in milliseconds.\n\n", nanoDuration, milliDuration);
					}

					// Run QS and display results
					start = System.nanoTime();
					Alg.quickSort(dupQS);
					end = System.nanoTime();
					nanoDuration = end - start;
					milliDuration = nanoDuration / 1000000;

					if (Alg.isOrdered(dupQS)) {
						System.out.println("Array was sorted by Quick sort.");
						System.out.printf("Quick Sort Algo took %f in nanoseconds or %f in milliseconds.\n\n", nanoDuration, milliDuration);
					}			


				}

				else if (option == 2) {
					//create duplicate
					int[] original = new int[100000];
					for(int i = 0; i < original.length; i ++) {
						original[i] = ranGen.nextInt(100000 - 1) + 1;
					}
					//create dups
					int[] dupIS = original.clone();
					int[] dupQS = original.clone();
					
					//Run IS and display results
					start = System.nanoTime();
					Alg.insertionSort(dupIS);
					end = System.nanoTime();
					nanoDuration = end - start;
					milliDuration = nanoDuration / 1000000;

					if (Alg.isOrdered(dupIS)) {
						System.out.println("Array was sorted by Insertion sort.");
						System.out.printf("Insertion Sort Algo took %f in nanoseconds or %f in milliseconds.\n\n", nanoDuration, milliDuration);
					}

					// Run QS and display results
					start = System.nanoTime();
					Alg.quickSort(dupQS);
					end = System.nanoTime();
					nanoDuration = end - start;
					milliDuration = nanoDuration / 1000000;

					if (Alg.isOrdered(dupQS)) {
						System.out.println("Array was sorted by Quick sort.");
						System.out.printf("Quick Sort Algo took %f in nanoseconds or %f in milliseconds.\n\n", nanoDuration, milliDuration);
					}	
				}

				else {
					//create reverse
					int[] original = new int[100000];
					for(int i = 0; i < original.length; i ++) {
						original[i] = 100000 - i;
					}
					
					//create dups
					int[] dupIS = original.clone();
					int[] dupQS = original.clone();

					//Run IS and display results
					start = System.nanoTime();
					Alg.insertionSort(dupIS);
					end = System.nanoTime();
					nanoDuration = end - start;
					milliDuration = nanoDuration / 1000000;
					
					if (Alg.isOrdered(dupIS)) {
						System.out.println("Array was sorted by Insertion sort.");
						System.out.printf("Insertion Sort Algo took %f in nanoseconds or %f in milliseconds.\n\n", nanoDuration, milliDuration);
					}
					
					// Run QS and display results
					start = System.nanoTime();
					Alg.quickSort(dupQS);
					end = System.nanoTime();
					nanoDuration = end - start;
					milliDuration = nanoDuration / 1000000;
					
					if (Alg.isOrdered(dupQS)) {
						System.out.println("Array was sorted by Quick sort.");
						System.out.printf("Quick Sort Algo took %f in nanoseconds or %f in milliseconds.\n\n", nanoDuration, milliDuration);
					}	
					
				}

			}

			else if (option == 4) {
				System.out.println("Exiting program...");
				break;
			}
			else {
				System.out.println("Incorrect input");
			}
		}
	}
}
